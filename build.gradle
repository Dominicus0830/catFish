plugins {
    id 'java'
    id 'maven-publish'
    id("io.github.gradle-nexus.publish-plugin") version "1.1.0"
}

group = 'org.CatAndDomi'
version = '0.3.0'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

jar {
    archiveName("${project.name}-${version}.jar")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId group
            artifactId project.name
            version version

            artifact("build/libs/$project.name-$version" + ".jar") {
                extension 'jar'
            }
        }
    }
    repositories {
        maven {
            credentials {
                username = repoUsername
                password = repoPassword
            }
            def releasesRepoUrl = "http://nexus.dominicus.kr:8081/repository/CatFish-release/"
            def snapshotsRepoUrl = "http://nexus.dominicus.kr:8081/repository/CatFish-snapshot/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            allowInsecureProtocol = true
        }
    }
}

repositories {
    mavenCentral()
    maven {
        credentials {
            username = repoUsername
            password = repoPassword
        }
        url "http://nexus.dominicus.kr:8081/repository/CatFish/"
        allowInsecureProtocol = true
    }

    //NMS
    maven {
        url 'https://repo.dmulloy2.net/repository/public/'
    }
    maven {
        url 'https://libraries.minecraft.net/'
        metadataSources {
            mavenPom()
            artifact()
            ignoreGradleMetadataRedirection()
        }
    }


    maven {
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        content {
            includeGroup 'org.bukkit'
            includeGroup 'org.spigotmc'
        }
    }
    maven { url = 'https://oss.sonatype.org/content/repositories/snaps hots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation 'org.jetbrains:annotations:24.0.0'
    compileOnly 'org.spigotmc:spigot-api:1.20.4-R0.1-SNAPSHOT'
    compileOnly 'org.spigotmc:spigot:1.20.4-R0.1-SNAPSHOT'
}

compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

build {
    sourceCompatibility = 17
    targetCompatibility = 17
}

task A_Fix_Bug {
    doFirst {
        def v = buildFile.getText().find(version)
        def (major, minor, patch) = v.tokenize('.')
        int newPatch = patch.toInteger() + 1
        String newVersion = major + "." + minor + "." + newPatch
        String updatedVersion = buildFile.getText().replaceFirst("version = '" + v + "'", "version = '" + newVersion + "'")
        project.version = newVersion

        allprojects.forEach(p -> {
            p.buildFile.setText(p.buildFile.getText().replaceFirst("version = '" + v + "'", "version = '" + newVersion + "'"))
            println "Project Module : " + p.name
            p.sourceSets.main.resources.srcDirs().getFiles().forEach(o -> {
                if (o.getName().equals("plugin.yml")) {
                    List<String> lines = new ArrayList<String>()
                    String line
                    File f = o
                    println "File : " + f.getAbsolutePath()
                    FileReader fr = new FileReader(f)
                    BufferedReader br = new BufferedReader(fr)
                    while ((line = br.readLine()) != null) {
                        if (line.contains("version") && !line.contains("api")) {
                            line = "version: " + newVersion
                        }
                        lines.add(line + "\n")
                    }
                    fr.close()
                    br.close()
                    BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(f), "UTF-8"))
                    lines.forEach(out::write)
                    out.close()
                }
            })
        })
        buildFile.setText(updatedVersion)
    }
}

task A_Middle_update {
    doFirst {
        def v = buildFile.getText().find(version)
        def (major, minor, patch) = v.tokenize('.')
        int newMinor = minor.toInteger() + 1
        int newPatch = 0
        String newVersion = major + "." + newMinor + "." + newPatch
        String updatedVersion = buildFile.getText().replaceFirst("version = '" + v + "'", "version = '" + newVersion + "'")
        project.version = newVersion

        allprojects.forEach(p -> {
            p.buildFile.setText(p.buildFile.getText().replaceFirst("version = '" + v + "'", "version = '" + newVersion + "'"))
            println "Project Module : " + p.name
            p.sourceSets.main.resources.srcDirs().getFiles().forEach(o -> {
                if (o.getName().equals("plugin.yml")) {
                    List<String> lines = new ArrayList<String>()
                    String line
                    File f = o
                    println "File : " + f.getAbsolutePath()
                    FileReader fr = new FileReader(f)
                    BufferedReader br = new BufferedReader(fr)
                    while ((line = br.readLine()) != null) {
                        if (line.contains("version") && !line.contains("api")) {
                            line = "version: " + newVersion
                        }
                        lines.add(line + "\n")
                    }
                    fr.close()
                    br.close()
                    BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(f), "UTF-8"))
                    lines.forEach(out::write)
                    out.close()
                }
            })
        })
        buildFile.setText(updatedVersion)
    }
}

task A_Big_update {
    doFirst {
        def v = buildFile.getText().find(version)
        def (major, minor, patch) = v.tokenize('.')
        int newMinor = 0
        int newPatch = 0
        int newMajor = major.toInteger() + 1
        String newVersion = newMajor + "." + newMinor + "." + newPatch
        String updatedVersion = buildFile.getText().replaceFirst("version = '" + v + "'", "version = '" + newVersion + "'")
        project.version = newVersion

        allprojects.forEach(p -> {
            p.buildFile.setText(p.buildFile.getText().replaceFirst("version = '" + v + "'", "version = '" + newVersion + "'"))
            println "Project Module : " + p.name
            p.sourceSets.main.resources.srcDirs().getFiles().forEach(o -> {
                if (o.getName().equals("plugin.yml")) {
                    List<String> lines = new ArrayList<String>()
                    String line
                    File f = o
                    println "File : " + f.getAbsolutePath()
                    FileReader fr = new FileReader(f)
                    BufferedReader br = new BufferedReader(fr)
                    while ((line = br.readLine()) != null) {
                        if (line.contains("version") && !line.contains("api")) {
                            line = "version: " + newVersion
                        }
                        lines.add(line + "\n")
                    }
                    fr.close()
                    br.close()
                    BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(f), "UTF-8"))
                    lines.forEach(out::write)
                    out.close()
                }
            })
        })
        buildFile.setText(updatedVersion)
    }
}

test {
    useJUnitPlatform()
}